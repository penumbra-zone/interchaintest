// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/crypto/tct/v1alpha1/tct.proto

package tctv1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StateCommitment struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *StateCommitment) Reset()         { *m = StateCommitment{} }
func (m *StateCommitment) String() string { return proto.CompactTextString(m) }
func (*StateCommitment) ProtoMessage()    {}
func (*StateCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a94190b2b9c1621, []int{0}
}
func (m *StateCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCommitment.Merge(m, src)
}
func (m *StateCommitment) XXX_Size() int {
	return m.Size()
}
func (m *StateCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_StateCommitment proto.InternalMessageInfo

func (m *StateCommitment) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type MerkleRoot struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *MerkleRoot) Reset()         { *m = MerkleRoot{} }
func (m *MerkleRoot) String() string { return proto.CompactTextString(m) }
func (*MerkleRoot) ProtoMessage()    {}
func (*MerkleRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a94190b2b9c1621, []int{1}
}
func (m *MerkleRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleRoot.Merge(m, src)
}
func (m *MerkleRoot) XXX_Size() int {
	return m.Size()
}
func (m *MerkleRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleRoot.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleRoot proto.InternalMessageInfo

func (m *MerkleRoot) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

// An authentication path from a state commitment to the root of the state commitment tree.
type StateCommitmentProof struct {
	NoteCommitment *StateCommitment   `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	Position       uint64             `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	AuthPath       []*MerklePathChunk `protobuf:"bytes,3,rep,name=auth_path,json=authPath,proto3" json:"auth_path,omitempty"`
}

func (m *StateCommitmentProof) Reset()         { *m = StateCommitmentProof{} }
func (m *StateCommitmentProof) String() string { return proto.CompactTextString(m) }
func (*StateCommitmentProof) ProtoMessage()    {}
func (*StateCommitmentProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a94190b2b9c1621, []int{2}
}
func (m *StateCommitmentProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCommitmentProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCommitmentProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCommitmentProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCommitmentProof.Merge(m, src)
}
func (m *StateCommitmentProof) XXX_Size() int {
	return m.Size()
}
func (m *StateCommitmentProof) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCommitmentProof.DiscardUnknown(m)
}

var xxx_messageInfo_StateCommitmentProof proto.InternalMessageInfo

func (m *StateCommitmentProof) GetNoteCommitment() *StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *StateCommitmentProof) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *StateCommitmentProof) GetAuthPath() []*MerklePathChunk {
	if m != nil {
		return m.AuthPath
	}
	return nil
}

// A set of 3 sibling hashes in the auth path for some note commitment.
type MerklePathChunk struct {
	Sibling_1 []byte `protobuf:"bytes,1,opt,name=sibling_1,json=sibling1,proto3" json:"sibling_1,omitempty"`
	Sibling_2 []byte `protobuf:"bytes,2,opt,name=sibling_2,json=sibling2,proto3" json:"sibling_2,omitempty"`
	Sibling_3 []byte `protobuf:"bytes,3,opt,name=sibling_3,json=sibling3,proto3" json:"sibling_3,omitempty"`
}

func (m *MerklePathChunk) Reset()         { *m = MerklePathChunk{} }
func (m *MerklePathChunk) String() string { return proto.CompactTextString(m) }
func (*MerklePathChunk) ProtoMessage()    {}
func (*MerklePathChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a94190b2b9c1621, []int{3}
}
func (m *MerklePathChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerklePathChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerklePathChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerklePathChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerklePathChunk.Merge(m, src)
}
func (m *MerklePathChunk) XXX_Size() int {
	return m.Size()
}
func (m *MerklePathChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_MerklePathChunk.DiscardUnknown(m)
}

var xxx_messageInfo_MerklePathChunk proto.InternalMessageInfo

func (m *MerklePathChunk) GetSibling_1() []byte {
	if m != nil {
		return m.Sibling_1
	}
	return nil
}

func (m *MerklePathChunk) GetSibling_2() []byte {
	if m != nil {
		return m.Sibling_2
	}
	return nil
}

func (m *MerklePathChunk) GetSibling_3() []byte {
	if m != nil {
		return m.Sibling_3
	}
	return nil
}

func init() {
	proto.RegisterType((*StateCommitment)(nil), "penumbra.crypto.tct.v1alpha1.StateCommitment")
	proto.RegisterType((*MerkleRoot)(nil), "penumbra.crypto.tct.v1alpha1.MerkleRoot")
	proto.RegisterType((*StateCommitmentProof)(nil), "penumbra.crypto.tct.v1alpha1.StateCommitmentProof")
	proto.RegisterType((*MerklePathChunk)(nil), "penumbra.crypto.tct.v1alpha1.MerklePathChunk")
}

func init() {
	proto.RegisterFile("penumbra/crypto/tct/v1alpha1/tct.proto", fileDescriptor_7a94190b2b9c1621)
}

var fileDescriptor_7a94190b2b9c1621 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x3b, 0xa9, 0x4a, 0x77, 0x14, 0x0b, 0x61, 0x0f, 0x45, 0x97, 0x58, 0x7a, 0xd0, 0x5e,
	0x36, 0x43, 0xdb, 0x8b, 0xc4, 0x5b, 0x7b, 0x10, 0x84, 0x85, 0x10, 0xc3, 0x1e, 0xa4, 0x50, 0x27,
	0xe3, 0xd8, 0x19, 0x36, 0x99, 0x09, 0x93, 0x2f, 0x01, 0xdf, 0xc2, 0x67, 0xf0, 0xe8, 0x1b, 0xf8,
	0x06, 0xe2, 0x69, 0x4f, 0xe2, 0x51, 0xd2, 0x9b, 0x4f, 0x21, 0x49, 0x9a, 0xdd, 0x5a, 0x30, 0x7b,
	0x4a, 0xfe, 0xf3, 0xfb, 0xcf, 0x37, 0xff, 0xef, 0xe3, 0xc3, 0xcf, 0x53, 0xae, 0xf2, 0x24, 0x32,
	0x94, 0x30, 0xf3, 0x29, 0x05, 0x4d, 0x80, 0x01, 0x29, 0x66, 0x34, 0x4e, 0x05, 0x9d, 0x55, 0xc2,
	0x4d, 0x8d, 0x06, 0x6d, 0x9f, 0xb5, 0x3e, 0xb7, 0xf1, 0xb9, 0x15, 0x6a, 0x7d, 0x93, 0x17, 0x78,
	0xf8, 0x16, 0x28, 0xf0, 0x95, 0x4e, 0x12, 0x09, 0x09, 0x57, 0x60, 0x9f, 0xe2, 0xfb, 0x52, 0x29,
	0x6e, 0x46, 0x68, 0x8c, 0xa6, 0x8f, 0x82, 0x46, 0x4c, 0x26, 0x18, 0x5f, 0x70, 0x73, 0x15, 0xf3,
	0x40, 0xeb, 0xff, 0x79, 0x7e, 0x22, 0x7c, 0x7a, 0x54, 0xcd, 0x37, 0x5a, 0x7f, 0xb4, 0x2f, 0xf1,
	0x50, 0x69, 0xe0, 0x1b, 0x76, 0x73, 0x5e, 0x5f, 0x7c, 0x38, 0x3f, 0x77, 0xbb, 0xd2, 0xb9, 0x47,
	0xc5, 0x82, 0xc7, 0x55, 0x95, 0x83, 0xa8, 0x4f, 0xf0, 0x20, 0xd5, 0x99, 0x04, 0xa9, 0xd5, 0xc8,
	0x1a, 0xa3, 0xe9, 0xbd, 0xe0, 0x46, 0xdb, 0x6f, 0xf0, 0x09, 0xcd, 0x41, 0x6c, 0x52, 0x0a, 0x62,
	0xd4, 0x1f, 0xf7, 0xef, 0x7e, 0xad, 0xe9, 0xcf, 0xa7, 0x20, 0x56, 0x22, 0x57, 0x57, 0xc1, 0xa0,
	0xba, 0x5f, 0xc9, 0x89, 0xc0, 0xc3, 0x23, 0x68, 0x3f, 0xc5, 0x27, 0x99, 0x8c, 0x62, 0xa9, 0xb6,
	0x9b, 0xd9, 0x7e, 0x0a, 0x83, 0xfd, 0xc1, 0xec, 0x10, 0xce, 0xeb, 0x60, 0xb7, 0x70, 0x7e, 0x08,
	0x17, 0xa3, 0xfe, 0x3f, 0x70, 0xb1, 0xfc, 0x66, 0x7d, 0x2f, 0x1d, 0x74, 0x5d, 0x3a, 0xe8, 0x77,
	0xe9, 0xa0, 0xcf, 0x3b, 0xa7, 0x77, 0xbd, 0x73, 0x7a, 0xbf, 0x76, 0x4e, 0x0f, 0x8f, 0x99, 0x4e,
	0x3a, 0x1b, 0x58, 0x0e, 0x42, 0x56, 0x0d, 0x1c, 0xb4, 0x8f, 0xde, 0xbd, 0xdf, 0x4a, 0x10, 0x79,
	0xe4, 0x32, 0x9d, 0x90, 0x0c, 0x0c, 0x55, 0x5b, 0x1e, 0xeb, 0x82, 0x9f, 0x17, 0x5c, 0x41, 0x6e,
	0x78, 0x46, 0xa4, 0x02, 0x6e, 0x98, 0xa0, 0xd5, 0x37, 0x03, 0x52, 0xbc, 0x24, 0xb5, 0x20, 0x5d,
	0x6b, 0xf5, 0x0a, 0x18, 0xb4, 0xff, 0x5f, 0xac, 0xbe, 0xbf, 0x0a, 0xbf, 0x5a, 0x67, 0x7e, 0x1b,
	0x69, 0xd5, 0x44, 0x0a, 0x19, 0xb8, 0x97, 0x7b, 0xd3, 0x8f, 0x5b, 0xbc, 0x6e, 0xf0, 0x3a, 0x64,
	0xb0, 0x6e, 0x71, 0x69, 0x4d, 0xbb, 0xf0, 0xfa, 0xb5, 0xbf, 0xbc, 0xe0, 0x40, 0x3f, 0x50, 0xa0,
	0x7f, 0xac, 0x67, 0xad, 0xd5, 0xf3, 0x1a, 0xaf, 0xe7, 0x85, 0x0c, 0x3c, 0xaf, 0x75, 0x47, 0x0f,
	0xea, 0x85, 0x5f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x7e, 0x2e, 0x29, 0x1a, 0x03, 0x00,
	0x00,
}

func (m *StateCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintTct(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MerkleRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleRoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleRoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintTct(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateCommitmentProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCommitmentProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCommitmentProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthPath) > 0 {
		for iNdEx := len(m.AuthPath) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthPath[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Position != 0 {
		i = encodeVarintTct(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MerklePathChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerklePathChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerklePathChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sibling_3) > 0 {
		i -= len(m.Sibling_3)
		copy(dAtA[i:], m.Sibling_3)
		i = encodeVarintTct(dAtA, i, uint64(len(m.Sibling_3)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sibling_2) > 0 {
		i -= len(m.Sibling_2)
		copy(dAtA[i:], m.Sibling_2)
		i = encodeVarintTct(dAtA, i, uint64(len(m.Sibling_2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sibling_1) > 0 {
		i -= len(m.Sibling_1)
		copy(dAtA[i:], m.Sibling_1)
		i = encodeVarintTct(dAtA, i, uint64(len(m.Sibling_1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTct(dAtA []byte, offset int, v uint64) int {
	offset -= sovTct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovTct(uint64(l))
	}
	return n
}

func (m *MerkleRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovTct(uint64(l))
	}
	return n
}

func (m *StateCommitmentProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovTct(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovTct(uint64(m.Position))
	}
	if len(m.AuthPath) > 0 {
		for _, e := range m.AuthPath {
			l = e.Size()
			n += 1 + l + sovTct(uint64(l))
		}
	}
	return n
}

func (m *MerklePathChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sibling_1)
	if l > 0 {
		n += 1 + l + sovTct(uint64(l))
	}
	l = len(m.Sibling_2)
	if l > 0 {
		n += 1 + l + sovTct(uint64(l))
	}
	l = len(m.Sibling_3)
	if l > 0 {
		n += 1 + l + sovTct(uint64(l))
	}
	return n
}

func sovTct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTct(x uint64) (n int) {
	return sovTct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StateCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateCommitmentProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCommitmentProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCommitmentProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthPath = append(m.AuthPath, &MerklePathChunk{})
			if err := m.AuthPath[len(m.AuthPath)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerklePathChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerklePathChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerklePathChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sibling_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sibling_1 = append(m.Sibling_1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sibling_1 == nil {
				m.Sibling_1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sibling_2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sibling_2 = append(m.Sibling_2[:0], dAtA[iNdEx:postIndex]...)
			if m.Sibling_2 == nil {
				m.Sibling_2 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sibling_3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sibling_3 = append(m.Sibling_3[:0], dAtA[iNdEx:postIndex]...)
			if m.Sibling_3 == nil {
				m.Sibling_3 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTct = fmt.Errorf("proto: unexpected end of group")
)
